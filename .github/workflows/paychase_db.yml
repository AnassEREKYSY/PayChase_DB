name: CI/CD - PayChase DB Stack

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: paychase-db-stack

jobs:
  docker_build_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Compute lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
      - name: Set image tag
        id: meta
        run: echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      - uses: docker/setup-buildx-action@v3
      - name: Build & Push DB Stack Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_ovh:
    runs-on: ubuntu-latest
    needs: docker_build_push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Compute lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
      - name: Deploy to OVH
        uses: appleboy/ssh-action@v1.0.0
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        with:
          host: ${{ secrets.OVH_HOST }}
          username: ${{ secrets.OVH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY,OWNER_LC,GHCR_TOKEN
          script: |
            set -euo pipefail

            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker $USER || true
            fi
            if ! docker compose version >/dev/null 2>&1; then
              mkdir -p ~/.docker/cli-plugins
              curl -fsSL "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m)" -o ~/.docker/cli-plugins/docker-compose
              chmod +x ~/.docker/cli-plugins/docker-compose
            fi

            APP_DIR="$HOME/paychase_db"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            echo "$GHCR_TOKEN" | docker login "$REGISTRY" -u "${{ github.actor }}" --password-stdin

            docker network create paychase_net || true

            cat > .env <<'EOF'
            COMPOSE_PROJECT_NAME=paychase_db
            MONGO_IMAGE=mongo:7
            MONGO_CONTAINER=paychase-mongo
            MONGO_PORT=27017
            MONGO_INITDB_ROOT_USERNAME=root
            MONGO_INITDB_ROOT_PASSWORD=rootpass
            MONGO_DB_NAME=paychase
            REDIS_IMAGE=redis:7
            REDIS_CONTAINER=paychase-redis
            REDIS_PORT=6379
            EOF

            cat > docker-compose.yml <<'YML'
            version: "3.9"

            services:
              mongo:
                image: ${MONGO_IMAGE}
                container_name: ${MONGO_CONTAINER}
                restart: unless-stopped
                ports:
                  - "${MONGO_PORT}:27017"
                environment:
                  MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
                  MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
                volumes:
                  - mongo_data:/data/db
                healthcheck:
                  test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' | grep 1"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                networks: [paychase_net]

              redis:
                image: ${REDIS_IMAGE}
                container_name: ${REDIS_CONTAINER}
                restart: unless-stopped
                ports:
                  - "${REDIS_PORT}:6379"
                command: ["redis-server", "--appendonly", "yes"]
                volumes:
                  - redis_data:/data
                healthcheck:
                  test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                networks: [paychase_net]

            volumes:
              mongo_data:
              redis_data:

            networks:
              paychase_net:
                external: true
            YML

            docker compose --project-name paychase_db down --remove-orphans || true
            docker compose --project-name paychase_db pull
            docker compose --project-name paychase_db up -d
